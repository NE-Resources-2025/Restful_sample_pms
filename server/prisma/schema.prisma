generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  role         String        @default("user")
  isVerified   Boolean       @default(false)
  otp          String?
  otpExpiresAt DateTime?
  vehicles     Vehicle[]
  slotRequests SlotRequest[]
  logs         Log[]
}

model Vehicle {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  plateNumber     String        @unique
  vehicleType     String
  size            String
  otherAttributes Json          @default("{}")
  slotRequests    SlotRequest[]
}

model ParkingSlot {
  id           Int           @id @default(autoincrement())
  slotNumber   String        @unique
  size         String
  vehicleType  String
  status       String        @default("available")
  location     String
  slotRequests SlotRequest[]
}

model SlotRequest {
  id            Int          @id @default(autoincrement())
  userId        Int
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicleId     Int
  vehicle       Vehicle      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  slotId        Int?
  slot          ParkingSlot? @relation(fields: [slotId], references: [id])
  slotNumber    String?
  requestStatus String       @default("pending")
  approvedAt    DateTime?
  createdAt     DateTime     @default(now()) // Add this
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  createdAt DateTime @default(now())
}
